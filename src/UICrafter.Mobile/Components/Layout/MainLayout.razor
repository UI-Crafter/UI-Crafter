@inherits LayoutComponentBase

@* Required *@
<MudThemeProvider />
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<div class="page">
 @*    <div class="sidebar">
        <NavMenu />
    </div> *@

    <main class="main">
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    Hello, @context.User.Identity?.Name
                    <a href="#" @onclick="Logout">Log out</a>
                </Authorized>
                <NotAuthorized>
                    <a href="#" @onclick="Login">Log in</a>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>

    <AuthorizeView>
        <Authorized>
            <footer class="footer">
                <NativeNavbar />
            </footer>
        </Authorized>
    </AuthorizeView>
</div>

<style>
    .page {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .main {
        flex: 1;
        padding-bottom: 100px; /* Adjust this to the height of the footer */
    }

    .footer {
        position: fixed;
        bottom: 0;
        left: 0;
        width: 100%;
        background-color: #f5f5f5;
        padding: 1rem;
        text-align: center;
        z-index: 100; /* Ensures footer stays above other content */
    }
</style>

@code {
    [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    public Task Login()
    {
        return ((CustomAuthStateProvider)AuthenticationStateProvider)
            .LogInAsync();
    }

    public void Logout()
    {
        ((CustomAuthStateProvider)AuthenticationStateProvider)
           .Logout();
    }
}
