@page "/authpage"
@attribute [Authorize]

<PageTitle>User Claims</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudPaper Class="pa-4 my-2">
        <h1>User Claims</h1>
        <MudDivider Class="my-1" DividerType="DividerType.FullWidth" Style="padding: 1px 0;" />
        @if (claims.Any())
        {
            <ul>
                @foreach (var claim in claims)
                {
                    <li style="overflow-wrap: break-word;"><b>@claim.Type:</b> @claim.Value</li>
                }
            </ul>
        }
    </MudPaper>
    <MudPaper Class="pa-4 my-2">
        @Response
    </MudPaper>

    <MudPaper Class="pa-4 my-2">
        Fetched @AppViews.Count AppViews
        <ul>
            @foreach (var view in AppViews)
            {
                <li>ID: @view.Id - Name: @view.Name</li>
            }
        </ul>

    </MudPaper>
</MudContainer>

@code {
    [Inject] private IHttpClientProvider HttpClientProvider { get; set; } = default!;
    private IEnumerable<Claim> claims = [];

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;

    private string Response { get; set; } = string.Empty;
    private IList<AppView> AppViews { get; set; } = [];

    [Inject] IAppViewRepository AppViewRepository { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                AppViews = await AppViewRepository.GetAppViews() ?? AppViews;
                Log.Debug("Got {count} appViews", AppViews.Count);
            }
            catch (Exception ex)
            {
                Log.Error("Got Exception: {exception}", ex);
            }

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState;
        if (authState is not null)
        {
            claims = authState.User.Claims;
        }

        var httpClient = await HttpClientProvider.GetAuthenticatedHttpClient();

        var response = await httpClient.GetAsync("api/prototest");
        Response = await response.Content.ReadAsStringAsync();
    }
}
