@page "/appview/{viewId:long?}"
@using System.ComponentModel
@attribute [Authorize]

@inject IAppViewRepository AppViewRepository
@inject RefreshViewState RefreshViewService

<PageTitle>@appView.Name</PageTitle>


<div style=@(!viewId.HasValue ? null : "display: none;")>
    <LoadMetaDataMobile />
</div>

@if (!viewId.HasValue)
{
    return;
}

<MudOverlay Visible="_isLoading" Absolute="true" DarkBackground="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
</MudOverlay>

<MobileComponentListRender
                           componentList="componentList"
                           jsonPublisher="jsonPublisher"
                           inputFieldPublisher="inputFieldPublisher" />


@code {
    [Parameter]
    public long? viewId { get; set; }
    private AppView? appView;

    private UIComponentList componentList = new UIComponentList();
    private JsonPublisher jsonPublisher = new JsonPublisher();
    private InputFieldPublisher inputFieldPublisher = new InputFieldPublisher();

    private long? _oldId;
    private bool _isLoading { get; set; } = false;

    protected override void OnInitialized()
    {
        RefreshViewService.PropertyChanged += OnRefreshViewStateChanged!;
    }

    private async void OnRefreshViewStateChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(RefreshViewService.IsRefreshing) && RefreshViewService.IsRefreshing)
        {
            await LoadData();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!viewId.HasValue)
        {
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        if (_oldId != viewId)
        {
            jsonPublisher = new();
            componentList = new();
            _oldId = viewId;
        }
        try
        {
            appView = await AppViewRepository.GetAppViewById(viewId.Value);

            if (appView != null && appView.Content != null)
            {
                componentList = UIComponentList.Parser.ParseFrom(appView.Content);
            }
            else
            {
                componentList = new UIComponentList();
            }
        }
        catch (Exception ex)
        {
            Log.Error("Error fetching AppView: ", ex);
        }
        finally
        {
            _isLoading = false;
            RefreshViewService.SetIsRefreshing(false);
            StateHasChanged();
        }
    }
}

