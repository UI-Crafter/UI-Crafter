@page "/appview/{viewId:long?}"
@using System.ComponentModel
@attribute [Authorize]

@inject IAppViewRepository AppViewRepository

<PageTitle>@appView?.Name</PageTitle>


<div style=@(!viewId.HasValue ? null : "display: none;")>
    <MudTabs Border Outlined PanelClass="pa-2">
        <MudTabPanel Text="My App-Views" Icon="@Icons.Material.Filled.Apps">
            <LoadMetaDataMobile />
        </MudTabPanel>
        <MudTabPanel Text="Public App-Views" Icon="@Icons.Material.Filled.Public">
            <LoadMetaDataMobile Public />
        </MudTabPanel>
    </MudTabs>
    
</div>

@if (viewId.HasValue)
{
    <CenterLoading Visible="_isLoading" />

    <ComponentListRender UIComponents="new(componentList.UIComponents)" />
}

@code {
    [Parameter]
    public long? viewId { get; set; }
    private AppView? appView;

    private UIComponentList componentList = new UIComponentList();

    private long? _oldId;
    private bool _isLoading { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        if (!viewId.HasValue)
        {
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        _isLoading = true;
        if (_oldId != viewId)
        {
            componentList = new();
            _oldId = viewId;
        }
        try
        {
            appView = await AppViewRepository.GetAppViewById(viewId!.Value);

            if (appView != null && appView.Content != null)
            {
                componentList = UIComponentList.Parser.ParseFrom(appView.Content);
            }
            else
            {
                componentList = new UIComponentList();
            }
        }
        catch (Exception ex)
        {
            Log.Error("Error fetching AppView: ", ex);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }
}

