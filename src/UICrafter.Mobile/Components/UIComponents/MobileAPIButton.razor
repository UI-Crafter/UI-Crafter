@using System.Text.RegularExpressions
@inherits BaseAPIButton
@inject IHttpClientProvider HttpClientProvider

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Parameter]
    public required UIComponent Button { get; set; }

    [CascadingParameter]
    public required JsonPublisher JSONPublisher { get; set; }

    [CascadingParameter]
    public required InputFieldPublisher inputFieldPublisher { get; set; }

    private string ModifiedURL { get; set; } = string.Empty;
    private Dictionary<string, string> LogicalNamesPairing = [];

    private bool _processing = false;

    protected override void OnInitialized()
    {
        ModifiedURL = Button.Button.URL;
        ButtonText = Button.Button.Label;
        OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, CallApi);
        GetLogicalNamesFromURL();
    }

    private void GetLogicalNamesFromURL()
    {
        if (string.IsNullOrEmpty(Button.Button.URL))
        {
            return;
        }

        var url = Button.Button.URL;
        // in the url string find all the logical names wraped in {}

        var matches = Regex.Matches(url, @"\{([^}]+)\}");

        foreach (Match match in matches)
        {
            var logicalName = match.Groups[1].Value;
            LogicalNamesPairing.Add(logicalName, "");
            Log.Information($"Logical Name: {logicalName}");
            inputFieldPublisher.Subscribe(logicalName, UpdateURL);
        }
    }

    private void UpdateURL(string logicalName, string value)
    {
        if (LogicalNamesPairing.ContainsKey(logicalName))
        {
            LogicalNamesPairing[logicalName] = value;
            ModifiedURL = Button.Button.URL;

            foreach (var pair in LogicalNamesPairing)
            {
                ModifiedURL = ModifiedURL.Replace($"{{{pair.Key}}}", pair.Value);
            }
        }
        Log.Information("Changed URL");
    }

    private async Task CallApi()
    {
        var httpClient = HttpClientProvider.GetDefaultHttpClient();
        try
        {
            Log.Information(ModifiedURL);
            var response = await httpClient.GetAsync(ModifiedURL);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadAsStringAsync(); ;

                // Update the button color and other state based on successful response
                ButtonColor = Color.Success;
                _processing = false;

                // Notify subscribers with the button GUID and the response data
                JSONPublisher.NotifySubscribers(Button.Guid, responseData);
            }
            else
            {
                // Handle unsuccessful response (e.g., error status code)
                ButtonColor = Color.Error;
                _processing = false;

                // Optionally log or handle error information
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions (e.g., network issues, deserialization errors)
            ButtonColor = Color.Error;
            _processing = false;
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private void Dispose()
    {
        foreach (var pair in LogicalNamesPairing)
		{
			inputFieldPublisher.Unsubscribe(pair.Key, UpdateURL);
		}
    }
}
