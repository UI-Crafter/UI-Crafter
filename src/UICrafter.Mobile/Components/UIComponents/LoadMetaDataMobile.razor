@using UICrafter.Core.Components.BaseComponents
@inherits BaseLoadMetaDataList
@inject IAppViewRepository AppViewRepository
@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="reload">
    @{
        base.BuildRenderTree(__builder);
    }
</div>

<script>
    let dotnetRef = {};

    window.initializeDotNetReference = (dotNetHelper) => {
        try {
            dotnetRef = dotNetHelper;
        } catch (error) {}
    };

    const ptr = PullToRefresh.init({
        mainElement: 'main',
        onRefresh() {
            if (dotnetRef) {
                dotnetRef.invokeMethodAsync('ReloadData');
            }
        },
        shouldPullToRefresh() {
            const hideLoadingList = document.querySelector('#hide-loading-list');
            const isHidden = hideLoadingList && hideLoadingList.style.display === 'none';

            if (isHidden) {
                return false;
            }

            return !document.querySelector('main').scrollTop;
        }
    });
</script>

@code {
    private DotNetObjectReference<LoadMetaDataMobile>? objRef;

    protected override string? SetupHref(AppViewMetadata view)
    {
        return "/appview/" + view.Id;
    }

    [Parameter]
    public bool Public { get; set; }

    protected override void OnInitialized()
    {
        objRef = DotNetObjectReference.Create(this);
        LoadPublic = Public;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("initializeDotNetReference", objRef);
            }
            catch { }
        }
    }

    [JSInvokable]
    public async Task ReloadData()
    {
        try
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            await Task.Yield();
            AppViews = await AppViewRepository.GetAppViewMetadata();
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
        catch { }
    }

    public void Dispose() => objRef?.Dispose();
}
