@page "/app-views"
@using System.Diagnostics
@using UICrafter.Core.AppView
@using UICrafter.Core.Models
@using MudBlazor
@using UICrafter.Core.Repository

@inject IAppViewRepository AppViewRepository
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">App Views</MudText>

@if (appViews == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!appViews.Any())
{
    <MudText Typo="Typo.subtitle1">No AppViews found. Here are some mock items:</MudText>

    <MudList T="string">
        <MudListItem OnClick="OnMockItemClicked">
            <MudText>Mock Item 1</MudText>
        </MudListItem>
        <MudListItem OnClick="OnMockItemClicked">
            <MudText>Mock Item 2</MudText>
        </MudListItem>
    </MudList>
}
else
{
    <MudList T="AppView">
        @foreach (var view in appViews)
        {
            <MudListItem @onclick="() => OnViewClicked(view.Id)">
                <MudText>@view.Name</MudText>
            </MudListItem>
        }
    </MudList>
}

@code {
    [Parameter]
    public string UserId { get; set; } = "1"; // Pass in UserId as a parameter

    private IList<AppView> appViews;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Simulate getting data from repository
            appViews = await AppViewRepository.GetAppViewsByUserIdAsync(UserId);
            //Task.Delay(1000).Wait(); // Simulate loading delay
            if (appViews == null || !appViews.Any())
            {
                Debug.WriteLine("No AppViews found, displaying mock items.");
                // Set empty list to display mock items
                appViews = new List<AppView>();
            }
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error fetching AppViews: {ex.Message}");
            appViews = new List<AppView>(); // Ensure mock items are shown on error
        }
    }

    private void OnViewClicked(long viewId)
    {
        Debug.WriteLine("Clicked a real view item");

        // Navigate to the corresponding view
        NavigationManager.NavigateTo($"/button-test?viewId={viewId}");
    }

    private void OnMockItemClicked()
    {
        Debug.WriteLine("Clicked mock item");
        // Navigate to /button-test/1 when a mock item is clicked
        NavigationManager.NavigateTo("/button-test/1");
    }
}
