@page "/app-views"

@inject IAppViewRepository AppViewRepository
@inject NavigationManager NavigationManager

<MudText Typo="Typo.h4">App Views</MudText>

@if (AppViews == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (!AppViews.Any())
{
    <MudText Typo="Typo.subtitle1">No AppViews found. Here are some mock items:</MudText>

    <MudList T="string">
        <MudListItem Href="/button-test/1">
            <MudText>Mock Item 1</MudText>
        </MudListItem>
        <MudListItem Href="/button-test/1">
            <MudText>Mock Item 2</MudText>
        </MudListItem>
    </MudList>
}
else
{
    <MudList T="AppView">
        @foreach (var view in AppViews)
        {
            <MudListItem Href=@($"/button-test?viewId={view.Id}")>
                <MudText>@view.Name</MudText>
            </MudListItem>
        }
    </MudList>
}

@code {
    [Parameter]
    public Guid UserId { get; set; } = Guid.Empty;
    private IList<AppView> AppViews { get; set; } = new List<AppView>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Simulate getting data from repository
            AppViews = await AppViewRepository.GetAppViewsByUserIdAsync(UserId) ?? AppViews;
            // await Task.Delay(1); // Simulate delay
        }
        catch (Exception ex)
        {
            Log.Error($"Error fetching AppViews: {ex.Message}");
        }
    }

    private void OnMockItemClicked()
    {
        Log.Debug("Clicked mock item");
        // Navigate to /button-test/1 when a mock item is clicked
        NavigationManager.NavigateTo("/button-test/1");
    }
}
