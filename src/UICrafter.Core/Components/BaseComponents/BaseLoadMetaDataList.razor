@inject IAppViewRepository AppViewRepository

<MudText Typo="Typo.h4">App Views</MudText>

@if (isLoading == true)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudList T="AppView">
        @foreach (var view in AppViews)
        {
            <MudListItem OnClick="() => HandleClick(view)" Href=@(SetupHref(view))>
                <MudText>@view.Name</MudText>
            </MudListItem>
        }
    </MudList>
}

@code {
    private IList<AppView> AppViews { get; set; } = new List<AppView>();
    private bool isLoading { get; set; } = true;

    protected virtual void HandleClick(AppView view){}
    protected virtual string? SetupHref(AppView view) { return null; }

    // protected override async void OnParametersSet()
    // {
    //     base.OnParametersSet();
    //     isLoading = true;

    //     try
    //     {
    //         AppViews = await AppViewRepository.GetAppViews() ?? AppViews;
    //         Log.Information("Called gRPC");
    //     }
    //     catch (Exception ex)
    //     {
    //         Log.Error("Error fetching AppViews: ", ex);
    //     }
    //     finally
    //     {
    //         isLoading = false;
    //         StateHasChanged();
    //     }
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                AppViews = await AppViewRepository.GetAppViews() ?? AppViews;
                Log.Information("Called gRPC");
            }
            catch (Exception ex)
            {
                Log.Error("Error fetching AppViews: ", ex);
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }
}
