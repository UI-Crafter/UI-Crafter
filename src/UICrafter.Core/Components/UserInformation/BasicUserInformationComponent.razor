@using System.Security.Claims
@attribute [Authorize]

<CenterLoading Visible="_isLoading"/>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudPaper Class="pa-4 my-2">
        <MudText Typo="Typo.h2">User Profile</MudText>
        <MudDivider Class="my-1" DividerType="DividerType.FullWidth" Style="padding: 1px 0;" />

        <MudText Typo="Typo.h6">Name:</MudText>
        <MudText>@User.GetName()</MudText>

        <MudText Typo="Typo.h6">Email:</MudText>
        <MudText>@User.GetEmail()</MudText>
    </MudPaper>

    <MudPaper Class="pa-4 my-2">
        You have @AppViews.Count AppViews
        <ul>
            @foreach (var view in AppViews)
            {
                <li>Name: @view.Name</li>
            }
        </ul>
    </MudPaper>
</MudContainer>

@code {
    [Inject] private IAppViewRepository AppViewRepository { get; set; } = default!;

    private IList<AppView> AppViews { get; set; } = [];

    private bool _isLoading { get; set; } = true;

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; } = default!;
    private ClaimsPrincipal User { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        AppViews = await AppViewRepository.GetAppViews() ?? new List<AppView>();
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await AuthState;
        if (authState is not null)
        {
            User = authState.User;
        }
        _isLoading = false;
    }
}
