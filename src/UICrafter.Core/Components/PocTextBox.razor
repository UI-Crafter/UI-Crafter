@using MudBlazor
@using UICrafter.Core.Models
@using UICrafter.Core.UIComponents
@using UICrafter.Core.Utility
@using System.Net.Http.Json
@using Newtonsoft.Json;


<MudTextField @bind-Value="Textbox.Textbox.Content"
              Label="@Textbox.Textbox.Label"
              Variant="Variant.Outlined"
              ReadOnly="true"
              MaxLines="@Textbox.Textbox.NumberOfLines">
</MudTextField>

@code {
    [Parameter]
    public required UIComponent Textbox { get; set; }

    [CascadingParameter]
    public required StupidStore StupidStore { get; set; }

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Textbox.Textbox.SourceRef))
        {
            StupidStore.Subscribe(Textbox.Textbox.SourceRef, UpdateTextboxContent);
        }
    }

    private void UpdateTextboxContent(Dictionary<string, object> jsonResponse)
    {
        if (string.IsNullOrEmpty(Textbox.Textbox.JsonField))
        {
            Textbox.Textbox.Content = "No JsonField specified.";
        }
        else
        {
            if (jsonResponse.TryGetValue(Textbox.Textbox.JsonField, out var fieldValue))
            {
                Textbox.Textbox.Content = ConvertValueToString(fieldValue);
            }
            else
            {
                Textbox.Textbox.Content = $"Field '{Textbox.Textbox.JsonField}' not found.";
            }
        }

        InvokeAsync(StateHasChanged);
    }

    private string ConvertValueToString(object value)
    {
        // Implement conversion logic similar to your previous code
        // For simplicity, we'll use value.ToString()
        return value?.ToString() ?? string.Empty;
    }

    public void Dispose()
    {
        StupidStore?.Unsubscribe(Textbox.Textbox.SourceRef, UpdateTextboxContent);
    }
}
