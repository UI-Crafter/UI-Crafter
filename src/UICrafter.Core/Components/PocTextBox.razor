@using MudBlazor
@using UICrafter.Core.Models
@using UICrafter.Core.Utility
@using System.Net.Http.Json
@using Newtonsoft.Json;


<MudTextField @bind-Value="Model.Description"
              Label="@Model.Name"
              Color="@ColorOptions.GetColor(Model)"
              Variant="Variant.Outlined"
              ReadOnly="true"
              AutoGrow="true"
              MaxLines="5">
</MudTextField>

@code {
    [Parameter]
    public PocTextBoxModel? Model { get; set; }

    [CascadingParameter]
    public StupidStore? StupidStore { get; set; }

    protected override void OnInitialized()
    {
        if (Model == null)
        {
            throw new InvalidOperationException("Model cannot be null.");
        }

        if (StupidStore == null)
        {
            throw new InvalidOperationException("StupidStore cannot be null.");
        }

        if (!string.IsNullOrEmpty(Model.buttonGUID))
        {

            StupidStore.Subscribe(Model.buttonGUID, UpdateTextBox);
        }
    }

    private void UpdateTextBox(Dictionary<string, object> jsonResponse)
    {
        if (Model == null)
        {
            return;
        }

        if (!string.IsNullOrEmpty(Model.JsonField))
        {
            Model.Description = "No JsonField specified.";
        }



        if( Model.JsonField == "response")
        {
            List<string> values = ExtractValues(jsonResponse);

            string description = string.Join(" ", values);

            Model.Description = description;
            StateHasChanged();
            return;
        }
        else
        {
            string fieldName = Model.JsonField;

            if (jsonResponse.TryGetValue(fieldName, out var fieldValue))
            {
                string description = ConvertValueToString(fieldValue);

                Model.Description = description;
            }
            else
            {
                Model.Description = $"Field '{fieldName}' not found in JSON response.";
            }
        }
 

        StateHasChanged();
    }

    private string ConvertValueToString(object value)
    {
        if (value is List<object> list)
        {
            var itemsAsString = list.Select(item => item.ToString());
            return string.Join(" ", itemsAsString);
        }
        else if (value is Dictionary<string, object> dict)
        {

            return JsonConvert.SerializeObject(dict);
        }
        else
        {
            return value?.ToString() ?? string.Empty;
        }
    }


    public void Dispose() =>
        StupidStore?.Unsubscribe(Model.buttonGUID, UpdateTextBox);



    private List<string> ExtractValues(object obj, string parentName = "", int indentLevel = 0, bool isArrayItem = false)
    {
        List<string> values = new List<string>();
        string indent = new string(' ', indentLevel * 2);

        if (obj is Dictionary<string, object> dict)
        {
            foreach (var kvp in dict)
            {
                values.AddRange(ExtractValues(kvp.Value, kvp.Key, indentLevel));
            }
        }
        else if (obj is List<object> list)
        {
            if (!string.IsNullOrEmpty(parentName) && !isArrayItem)
            {
                values.Add($"{indent}{parentName}:");
            }

            for (int i = 0; i < list.Count; i++)
            {
                var item = list[i];

                values.AddRange(ExtractValues(item, $"{parentName}[{i}]", indentLevel + 1, isArrayItem: true));
            }
        }
        else if (obj != null)
        {

            if (!string.IsNullOrEmpty(parentName) && !isArrayItem)
            {
                values.Add($"{indent}{parentName}: {obj}");
            }
            else
            {
                values.Add($"{indent}- {obj}");
            }
        }

        return values;
    }


}
