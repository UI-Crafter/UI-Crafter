@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.WebUtilities
@using System.Collections.Concurrent
@inherits BaseAPIButton
@inject ISnackbar Snackbar
@inject IAPICallHandler APICallHandler

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Parameter]
    public required UIComponent Button { get; set; }

    [CascadingParameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    private string ModifiedURL { get; set; } = string.Empty;

    private bool _processing = false;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ButtonText = Button.Button.Label;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        OnClick = EventCallback.Factory.Create<MouseEventArgs>(this, ExecuteApiCall);
    }

    private async Task ExecuteApiCall()
    {
        if (_processing) return;

        _processing = true;

        if (string.IsNullOrEmpty(Button.Button.URL))
        {
            NotifyUser(Color.Info, "Button URL is empty", Severity.Info);
            _processing = false;
            return;
        }

        ModifiedURL = APICallUtility.ReplaceLogicalNames(UIComponents, Button.Button.URL);

        try
        {
            Log.Information(ModifiedURL);
            var response = await APICallHandler.ExecuteHttpRequest(UIComponents, Button.Button.HttpMethod, ModifiedURL, Button.Button.HttpHeaders, Button.Button.HttpBody);

            await HandleApiResponse(response);
        }
        catch (Exception ex)
        {
            Log.Error("Something went wrong fetching from endpoint {exception}", ex);
            NotifyUser(Color.Error, ex.Message, Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private void NotifyUser(Color buttonColor, string message, Severity severity)
    {
        ButtonColor = buttonColor;
        Snackbar.Add(message, severity);
    }

    private async Task HandleApiResponse(HttpResponseMessage response)
    {
        var responseData = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            NotifyUser(Color.Success, "Success", Severity.Success);
            UpdateTextBoxContents(responseData);
        }
        else
        {
            Log.Debug("Bad response from appview API: {ErrorMessage}", responseData);

            NotifyUser(Color.Error, $"{(int)response.StatusCode} - {response.StatusCode}", Severity.Error);

            var jsonResponse = JsonSerializer.Serialize(new { StatusCode = $"{(int)response.StatusCode} - {response.ReasonPhrase}", Data = responseData });
            UpdateTextBoxContents(jsonResponse);
        }

        Log.Information("Response status code: {StatusCode}", (int)response.StatusCode);
    }

    private void UpdateTextBoxContents(string responseData)
    {
        var json = JsonProcessor.ProcessJson(responseData);

        foreach (var component in UIComponents.Where(x => x.ComponentCase == UIComponent.ComponentOneofCase.Textbox && x.Textbox.SourceRef == Button.Guid))
        {
            if (component.Textbox?.UpdateContent is not null)
            {
                component.Textbox.UpdateContent(json);
            }
        }
    }
}
