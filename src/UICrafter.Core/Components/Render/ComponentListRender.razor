@using System.Collections.Specialized
@using System.Collections.Concurrent
@implements IDisposable

<CascadingValue Value="UIComponents">
    @foreach (var component in UIComponents)
    {
        switch (component.ComponentCase)
        {
            case UIComponent.ComponentOneofCase.Button:
                <RenderAPIButton @key=component Button="component" />
                break;
            case UIComponent.ComponentOneofCase.InputField:
                <RenderInputField @key=component InputField="component" />
                break;
            case UIComponent.ComponentOneofCase.Textbox:
                <RenderTextBox @key=component Textbox="component" />
                break;
            default:
                break;
        }
    }
</CascadingValue>

@code {
    [Parameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    protected override void OnInitialized()
    {
        UIComponents.CollectionChanged += ReRender;
    }

    private void ReRender(object? sender, NotifyCollectionChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        UIComponents.CollectionChanged -= ReRender;
    }
}
