@using DevLab.JmesPath
@inherits BaseTextBox

@{
    base.BuildRenderTree(__builder);
}

@code {
    [Parameter]
    public required UIComponent Textbox { get; set; }

    [Inject] private ISnackbar Snackbar { get; set; } = default!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        Label = Textbox.Textbox.Label;
        Lines = Textbox.Textbox.NumberOfLines;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Textbox.Textbox.UpdateContent = UpdateTextboxContent;
    }

    private void UpdateTextboxContent(Dictionary<string, string> jsonResponse)
    {
        if (string.IsNullOrEmpty(Textbox.Textbox.JsonField))
        {
            Content = "No JsonField or JsonQuery specified.";
        }
        else if (Textbox.Textbox.IsJsonQuery)
        {
            var _jmesPath = new JmesPath();
            string? result = null;
            try
            {
                result = _jmesPath.Transform(jsonResponse["response"], Textbox.Textbox.JsonField);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"API did not return valid json: {ex.Message}", Severity.Error);
            }

            if (result is not null)
            {
                Content = JsonToString.CleanUpString(result);
            }
            else
            {
                Content = "JsonQuery transformation failed.";
            }
        }
        else if (jsonResponse.ContainsKey(Textbox.Textbox.JsonField))
        {
            Content = JsonToString.CleanUpString(jsonResponse[Textbox.Textbox.JsonField]);
        }
        else
        {
            Content = $"Field '{Textbox.Textbox.JsonField}' not found in JSON response.";
        }
        InvokeAsync(StateHasChanged);
    }
}
