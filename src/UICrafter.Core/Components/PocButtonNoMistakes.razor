@inject IHttpClientProvider HttpClientProvider

<MudButton OnClick="CallApi"
           Color="@buttonColor">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
        <MudText Class="ms-2">Processing</MudText>
    }
    else
    {
        <MudText> @Button.Button.Label </MudText>
    }
    
</MudButton>

@code {
    [Parameter]
    public required UIComponent Button { get; set; }

    [CascadingParameter]
    public required StupidStore StupidStore { get; set; }

    private Color buttonColor = Color.Primary;
    private bool _processing = false;

    private async Task CallApi()
    {
        var httpclient = HttpClientProvider.GetDefaultHttpClient();
        try
        {
            buttonColor = Color.Primary;
            _processing = true;
            var originalLabel = Button.Button.Label;

            // Assume that Button.URL is the API endpoint
            var response = await httpclient.GetStringAsync(Button.Button.URL);

            if (response == null)
            {
                // Handle null response
                buttonColor = Color.Error;
                return;
            }
            await Task.Delay(1000);
            buttonColor = Color.Success;
            _processing = false;

            // Notify subscribers
            StupidStore.NotifySubscribers(Button.Guid, response);
        }
        catch (Exception ex)
        {
            Log.Debug($"Error calling API for button {Button.Button.Label}: {ex.Message}");
        }
    }
}
