@inherits LayoutComponentBase

<MudThemeProvider @ref=@MudThemeProvider Theme="@ThemeUtility.CreateTheme()" IsDarkMode="theme.IsDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudLink Class="ml-3 d-flex" Href="/" Typo="Typo.h3" Underline="Underline.None">
            <svg style="height: 1.1em;" xmlns="http://www.w3.org/2000/svg" viewBox="266 200 58 58">
                <ellipse style="stroke: currentcolor; fill: currentcolor; transform-origin: 82.7222% 34.9043%;" cx="292.503" cy="216.337" rx="2" ry="2"></ellipse>
                <path style="stroke: currentcolor; stroke-width: 4px; stroke-linecap: round; fill-opacity: 0;" d="M 317.398 215.337 C 309.481 215.338 304.748 214.967 302.109 216.895 C 299.47 218.823 299.356 223.05 299.427 231.31 C 299.5 239.824 298.874 244.094 301.268 245.884 C 303.662 247.675 308.322 246.985 317.194 246.985"></path>
                <path style="stroke: currentcolor; stroke-width: 4px; stroke-linejoin: round; stroke-linecap: round; fill-opacity: 0;" d="M 276.105 215.957 C 276.464 247.719 275.379 246.127 277.774 247.397 C 277.891 247.459 291.033 247.232 291.342 247.236 C 293.797 247.27 292.847 246.871 292.847 223.924"></path>
            </svg>
            rafter
        </MudLink>
        <MudSpacer />
        <NavMenu />
        <UserProfileAvatar ThemeMode=@theme.ThemeMode ThemeModeChanged=@ThemeModeChanged />
    </MudAppBar>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">ðŸ—™</a>
</div>

@code {
    [CascadingParameter] public Theme theme { get; set; } = new();
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;

    private bool _isDarkMode = true;
    private MudThemeProvider MudThemeProvider { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            theme.SystemDarkMode = await MudThemeProvider.GetSystemPreference();
            await MudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        theme.SystemDarkMode = newValue;
        await UpdateThemeCookie();
        await InvokeAsync(StateHasChanged);
    }

    private Task ThemeModeChanged(ThemeMode mode)
    {
        theme.ThemeMode = mode;
        return UpdateThemeCookie();
    }

    private async Task UpdateThemeCookie()
    {
        var json = JsonSerializer.Serialize(theme);
        await JSRuntime.InvokeVoidAsync("blazorUtility.setThemeCookie", Convert.ToBase64String(Encoding.UTF8.GetBytes(json)));
    }
}
