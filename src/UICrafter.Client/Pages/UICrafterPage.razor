@using UICrafter.Client.Components.Properties

@page "/uicrafter"
@attribute [Authorize]

<PageTitle>UICrafter-Editor</PageTitle>

<MudStack Row @onmousedown="DeselectComponent">
    <!-- Left section: Component Grid (20%) -->
    <MudStack Style="width: 20%">
        <MudText>Components:</MudText>
        <ComponentGrid @bind-SelectedComponent="@SelectedComponent" @bind-DropContainer="@DropContainer" UIComponents="@UIComponents" />
    </MudStack>

    <!-- Center section: Dropzone (55%) -->
    <MudContainer Style="width: 55%;" MaxWidth="MaxWidth.Small">
        <MudTabs Elevation="2" Centered Outlined>
            <MudPaper Class="rounded mud-background-gray pa-2 flex-grow-1 overflow-auto" Style="height: 75vh;">
                <MudTabPanel Icon="@Icons.Material.Filled.DesignServices" Text="Editor">
                    <AppViewDesigner @bind-SelectedComponent="@SelectedComponent" @bind-DropContainer="@DropContainer" UIComponents="@UIComponents" />
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.Preview" Text="Preview">
                    <AppViewPreview UIComponents="@UIComponents" />
                </MudTabPanel>
            </MudPaper>
        </MudTabs>
    </MudContainer>

    <!-- Right section: Component Properties (25%) -->
    <MudStack Style="width: 25%;">
        <MudStack Row>
            <MudText>@($"{CurrentPropertiesName()} properties:")</MudText>
            @if (SelectedComponent is not null)
            {
                <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" OnClick="DeselectComponent" Class="ml-auto my-n1 mud-background-gray" Size="Size.Small" Variant="Variant.Filled" />
            }
        </MudStack>
        <Properties @bind-SelectedComponent="@SelectedComponent" @bind-DropContainer="@DropContainer" UIComponents="@UIComponents" @bind-AppView="AppView" />
    </MudStack>
</MudStack>


@code {
    private UIComponent? SelectedComponent { get; set; }
    private MudDropContainer<UIComponent>? DropContainer { get; set; }
    private AppView AppView { get; set; } = new AppView { Name = string.Empty };

    private ObservableCollection<UIComponent> UIComponents { get; set; } = [];

    private void DeselectComponent(MouseEventArgs args)
    {

        if (SelectedComponent is null) return;

        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private string CurrentPropertiesName() => SelectedComponent?.ComponentCase switch
    {
        UIComponent.ComponentOneofCase.Button => "API-Button",
        UIComponent.ComponentOneofCase.InputField => "Input Field",
        UIComponent.ComponentOneofCase.Textbox => "Textbox",
        _ => "App-view",
    };
}
