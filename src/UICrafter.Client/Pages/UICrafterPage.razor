@page "/uicrafter"

<div style="display: flex;">
    <!-- Left section: Component Grid (15%) -->
    <div style="width: 15%; padding-right: 1rem;">
        <MudText Style="padding-bottom: 1rem;">Components:</MudText>
        <MudGrid>
            <MudItem xs="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.SmartButton" Variant="Variant.Outlined" OnClick=@AddNewButton Size="Size.Large" />
                <MudText>Button</MudText>
            </MudItem>

            <MudItem xs="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.TextFields" Variant="Variant.Outlined" OnClick=@AddNewTextbox Size="Size.Large" />
                <MudText>Textbox</MudText>
            </MudItem>

            <MudItem xs="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.Input" Variant="Variant.Outlined" OnClick=@AddNewInputField Size="Size.Large" />
                <MudText>Input</MudText>
            </MudItem>
        </MudGrid>
    </div>

    <!-- Center section: Dropzone (70%) -->
    <div style="width: 70%; display: flex; justify-content: center; align-items: center;">
        <MudContainer MaxWidth="MaxWidth.Small">
            <MudDropContainer T="UIComponent" @ref="_dropContainer" Items="_uIComponents" ItemsSelector="@((item,dropzone) => item.DropZoneID == dropzone)" ItemDropped="ComponentUpdated" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudDropZone T="UIComponent" Identifier="Drop Zone 1" AllowReorder="true" Class="rounded mud-background-gray pa-6 ma-8 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">App-view:</MudText>
                    </MudDropZone>
                </ChildContent>
                <ItemRenderer>
                    @if (context is UIButton button)
                    {
                        @* <MudPaper Elevation="4" Class="pa-4 my-4">"@button.Label, @button.Color"</MudPaper> *@
                        <MudButton Variant="Variant.Filled" Color="@Color.Primary">@button.Label, @button.URL</MudButton>
                    }
                    else if (context is UIInputField inputField)
                    {
                        @* <MudPaper Elevation="4" Class="pa-4 my-4">"@inputField.Value, @inputField.Placeholder"</MudPaper> *@
                        <MudTextField @bind-Value="@inputField.Value" Label="@inputField.Placeholder" Variant="Variant.Outlined"></MudTextField>
                        @* <MudText Typo="Typo.subtitle1">Current Value: @inputField.Value</MudText> *@
                    }
                    else if (context is UITextBox textBox)
                    {
                        @* <MudPaper Elevation="4" Class="pa-4 my-4">"@textBox.Content"</MudPaper> *@
                        @* <MudText Typo="Typo.body1">@textBox.Content</MudText> *@
                        <MudPaper Elevation="2" Style="padding: 8px; border: 1px solid black;">
                            <MudText Typo="Typo.body1">@textBox.Content</MudText>
                        </MudPaper>

                    }
                    else
                    {
                        <MudPaper Elevation="4" Class="pa-4 my-4">Unknown Component</MudPaper>
                    }
                </ItemRenderer>
            </MudDropContainer>
        </MudContainer>
    </div>

    <!-- Right section: Properties (15%) -->
    <div style="width: 15%; padding-left: 1rem;">
        <MudText Style="padding-bottom: 1rem;">Properties:</MudText>

        @if (_selectedComponent is not null)
        {
            @if (_selectedComponent is UIButton button)
            {
                <MudTextField @bind-Value="button.Label" Label="Button Label" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="button.URL" Label="Button URL" Variant="Variant.Outlined"></MudTextField>
            }
            else if (_selectedComponent is UIInputField inputField)
            {
                <MudTextField @bind-Value="inputField.Placeholder" Label="Input Placeholder" Variant="Variant.Outlined"></MudTextField>
            }
            else if (_selectedComponent is UITextBox textBox)
            {
                <MudTextField @bind-Value="textBox.Content" Label="Textbox Content" Variant="Variant.Outlined"></MudTextField>
            }
        }
        else
        {
            <MudText Typo="Typo.body1">No component selected.</MudText>
        }
    </div>
</div>


@code {
    private MudDropContainer<UIComponent> _dropContainer;
    private UIComponent _selectedComponent;
    private List<UIComponent> _uIComponents = new() { };

    private void ComponentUpdated(MudItemDropInfo<UIComponent> component)
    {
        component.Item.DropZoneID = component.DropzoneIdentifier;
        _selectedComponent = component.Item;
    }

    private void AddNewUIComponent(UIComponent component)
    {
        _uIComponents.Add(component);
        _selectedComponent = component;
    }

    private void AddNewButton()
    {
        AddNewUIComponent(new UIButton { Label = "New Button", URL = "" });
        // _uIComponents.Add(new UIButton { Label = "New Button", URL = "www.soup.dk" });
        // _dropContainer.Refresh();
    }

    private void AddNewInputField()
    {
        AddNewUIComponent(new UIInputField { Placeholder = "New Input Field" });
        // _uIComponents.Add(new UIInputField { Placeholder = "New Input Field" });
        // _dropContainer.Refresh();
    }

    private void AddNewTextbox()
    {
        AddNewUIComponent(new UITextBox { Content = "New Textbox" });
        // _uIComponents.Add(new UITextBox { Content = "New Textbox" });
        // _dropContainer.Refresh();
    }

    public abstract class UIComponent
    {
        public virtual string Type { get; } = "";
        public string DropZoneID { get; set; } = "Drop Zone 1";
    }

    public class UIButton : UIComponent
    {
        public override string Type { get; } = "Button";
        public string Label { get; set; } = "";
        public string URL { get; set; } = "";
    }

    public class UIInputField : UIComponent
    {
        public override string Type { get; } = "InputField";
        public string Placeholder { get; set; } = "";
        public string Value { get; set; } = "";
    }

    public class UITextBox : UIComponent
    {
        public override string Type { get; } = "TextBox";
        public string Content { get; set; } = "";
    }
}
