@page "/uicrafter"

<MudStack Row="true">
    <!-- Left section: Component Grid (15%) -->
    <MudStack Style="width: 15%;">
        <MudText Class="">Components:</MudText>

        <MudContainer Class="rounded mud-background-gray pa-4">
            <MudGrid>
                <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.SmartButton" Variant="Variant.Outlined" OnClick=@AddNewButton Size="Size.Large" />
                    <MudText>Button</MudText>
                </MudItem>

                <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.TextFields" Variant="Variant.Outlined" OnClick=@AddNewTextbox Size="Size.Large" />
                    <MudText>Textbox</MudText>
                </MudItem>

                <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                    <MudIconButton Icon="@Icons.Material.Filled.Input" Variant="Variant.Outlined" OnClick=@AddNewInputField Size="Size.Large" />
                    <MudText>Input</MudText>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudStack>

    <!-- Center section: Dropzone (60%) -->
    <MudStack Style="width: 60%;" Class="align-center">
        <MudText>App-view:</MudText>

        <MudContainer MaxWidth="MaxWidth.Small">
            <MudDropContainer T="UIComponent" @ref="_dropContainer" Items="_uIComponents" ItemsSelector="@((item,dropzone) => item.DropZoneID == dropzone)" ItemDropped="ComponentUpdated" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudDropZone T="UIComponent" Identifier="Drop Zone 1" AllowReorder="true" Class="rounded mud-background-gray pa-2 flex-grow-1" Style="height: 45rem; overflow: auto;">
                    </MudDropZone>
                </ChildContent>
                <ItemRenderer>
                    @if (context is UIButton button)
                    {
                        <MudButton Class="mb-2" Variant="Variant.Filled" @onfocus="()=>SelectComponent(button)">@button.Label, @button.URL</MudButton>
                    }
                    else if (context is UIInputField inputField)
                    {
                        <MudTextField @bind-Value="@inputField.Value" Class="mb-2" Label="@inputField.Placeholder" Variant="Variant.Outlined" @onfocus="()=>SelectComponent(inputField)"></MudTextField>
                    }
                    else if (context is UITextBox textBox)
                    {
                        <MudTextField @bind-Value="@textBox.Content" Label="@textBox.Label" ReadOnly="true" ShrinkLabel="true" Lines=@textBox.NumberOfLines Variant="Variant.Outlined" @onfocus="()=>SelectComponent(textBox)" />
                    }
                    else
                    {
                        <MudPaper Elevation="4" Class="pa-4 my-4">Unknown Component</MudPaper>
                    }
                </ItemRenderer>
            </MudDropContainer>
        </MudContainer>
    </MudStack>

    <!-- Right section: Properties (25%) -->
    <MudStack Style="width: 25%;">
        <MudText>Properties:</MudText>

        <MudStack Class="rounded mud-background-gray pa-4 my-2 ">
            @if (_selectedComponent is not null)
            {
                @if (_selectedComponent is UIButton button)
                {
                    <MudTextField @bind-Value="button.Label"  Label="Button Label" Variant="Variant.Outlined" MaxLength="25"></MudTextField>
                    <MudTextField @bind-Value="button.URL"  Label="Button URL" Variant="Variant.Outlined"></MudTextField>
                }
                else if (_selectedComponent is UIInputField inputField)
                {
                    <MudTextField @bind-Value="inputField.Placeholder"  Label="Input Placeholder" Variant="Variant.Outlined" MaxLength="25"></MudTextField>
                }
                else if (_selectedComponent is UITextBox textBox)
                {
                    <MudTextField @bind-Value="textBox.Label"  Label="Textbox label" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="textBox.NumberOfLines"  Label="Textbox Content" Variant="Variant.Outlined"></MudTextField>
                    <MudTextField @bind-Value="textBox.Content"  Label="Textbox Content" Variant="Variant.Outlined" Lines="4"></MudTextField>
                }
                <MudButtonGroup Variant="Variant.Outlined" Class="mx-auto">
                    <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick=@SaveSelectedComponent Size="Size.Large" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick=@DeleteSelectedComponent Size="Size.Large" />
                </MudButtonGroup>
            }
            else
            {
                <MudText Typo="Typo.body1">No component selected.</MudText>
            }
        </MudStack>
    </MudStack>
</MudStack>


@code {
    private MudDropContainer<UIComponent>? _dropContainer;
    private UIComponent? _selectedComponent;
    private List<UIComponent> _uIComponents = new() { };

    private void ComponentUpdated(MudItemDropInfo<UIComponent> component)
    {
        if (component is null || component.Item is null) return;

        component.Item.DropZoneID = component.DropzoneIdentifier;
        _selectedComponent = component.Item;
    }

    private void AddNewUIComponent(UIComponent component)
    {
        _uIComponents.Add(component);
        _selectedComponent = component;
    }

    private void AddNewButton()
    {
        AddNewUIComponent(new UIButton { Label = "New Button", URL = "" });
        _dropContainer?.Refresh();
    }

    private void AddNewInputField()
    {
        AddNewUIComponent(new UIInputField { Placeholder = "New Input Field" });
        _dropContainer?.Refresh();
    }

    private void AddNewTextbox()
    {
        AddNewUIComponent(new UITextBox { Content = "New Textbox", Label = "New Textbox" });
        _dropContainer?.Refresh();
    }

    private void DeleteSelectedComponent()
    {
        if (_selectedComponent is null) return;

        _uIComponents.Remove(_selectedComponent);
        _selectedComponent = null;
        _dropContainer?.Refresh();
    }

    private void SaveSelectedComponent()
    {
        _dropContainer?.Refresh();
    }

    private void SelectComponent(UIComponent component)
    {
        _selectedComponent = component;
    }

    public abstract class UIComponent
    {
        public virtual string Type { get; } = "";
        public string DropZoneID { get; set; } = "Drop Zone 1";
    }

    public class UIButton : UIComponent
    {
        public override string Type { get; } = "Button";
        public string Label { get; set; } = "";
        public string URL { get; set; } = "";
    }

    public class UIInputField : UIComponent
    {
        public override string Type { get; } = "InputField";
        public string Placeholder { get; set; } = "";
        public string Value { get; set; } = "";
    }

    public class UITextBox : UIComponent
    {
        public override string Type { get; } = "TextBox";
        public string Label { get; set; } = "";
        public int NumberOfLines { get; set; } = 2;
        public string Content { get; set; } = "";
    }
}
