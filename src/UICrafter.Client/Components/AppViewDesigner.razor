@using UICrafter.Core.UIComponents

<MudContainer MaxWidth="MaxWidth.Small">
    <MudDropContainer T="UIComponent" @ref="DropContainer" Items="UIComponents" ItemsSelector="@((item,dropzone) => item.DropZoneID == dropzone)" ItemDropped="ComponentUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudDropZone T="UIComponent" Identifier="Drop Zone 1" AllowReorder="true" Class="rounded mud-background-gray pa-2 flex-grow-1 overflow-auto" Style="height: 45rem;">
            </MudDropZone>
        </ChildContent>
        <ItemRenderer>
            @if (context.ComponentCase == UIComponent.ComponentOneofCase.Button)
            {
                <MudButton Class="mb-2" Variant="Variant.Filled" @onfocus="()=>SelectComponent(context)">@context.Button.Label</MudButton>
            }
            else if (context.ComponentCase == UIComponent.ComponentOneofCase.InputField)
            {
                <MudTextField @bind-Value="@context.InputField.Value" Class="mb-2" Label="@context.InputField.Label" Variant="Variant.Outlined" @onfocus="()=>SelectComponent(context)"></MudTextField>
            }
            else if (context.ComponentCase == UIComponent.ComponentOneofCase.Textbox)
            {
                <MudTextField @bind-Value="@context.Textbox.Content" Label="@context.Textbox.Label" ReadOnly="true" ShrinkLabel="true" Lines=@context.Textbox.NumberOfLines Variant="Variant.Outlined" @onfocus="()=>SelectComponent(context)" />
            }
            else
            {
                <MudPaper Elevation="4" Class="pa-4 my-4">Unknown Component</MudPaper>
            }
        </ItemRenderer>
    </MudDropContainer>
</MudContainer>

@code {
    [Parameter]
    public required List<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if(DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private void SelectComponent(UIComponent component) => SelectedComponent = component;

    private void ComponentUpdated(MudItemDropInfo<UIComponent> component)
    {
        if (component is null || component.Item is null) return;

        int oldIndex = UIComponents.IndexOf(component.Item);
        int newIndex = component.IndexInZone;

        if (oldIndex != newIndex)
        {
            var tmp = UIComponents[oldIndex];
            UIComponents.RemoveAt(oldIndex);
            UIComponents.Insert(newIndex, tmp);
            // Console.WriteLine("Old: " + oldIndex + "\n" + "New: " + newIndex);
        }

        component.Item.DropZoneID = component.DropzoneIdentifier;
    }
}
