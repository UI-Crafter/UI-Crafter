@using UICrafter.Core.Models

<MudStack Style="15%">
    <MudText Class="">Components:</MudText>

    <MudContainer Class="rounded mud-background-gray pa-4">
        <MudGrid>
            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.SmartButton" Variant="Variant.Outlined" OnClick=@AddNewButton Size="Size.Large" />
                <MudText>Button</MudText>
            </MudItem>

            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.TextFields" Variant="Variant.Outlined" OnClick=@AddNewTextbox Size="Size.Large" />
                <MudText>Textbox</MudText>
            </MudItem>

            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.Input" Variant="Variant.Outlined" OnClick=@AddNewInputField Size="Size.Large" />
                <MudText>Input</MudText>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudStack>

@code {
    [Parameter]
    public required List<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private void AddNewComponent<T>(T component) where T : new()
    {
        var newComponent = new UIComponent
            {
                Guid = Guid.NewGuid().ToString(),
                DropZoneID = "Drop Zone 1",
            };

        if (component is UIButton button)
        {
            newComponent.Button = button;
        }
        else if (component is UIInputField inputField)
        {
            newComponent.InputField = inputField;
        }
        else if (component is UITextbox textbox)
        {
            newComponent.Textbox = textbox;
        }

        UIComponents.Add(newComponent);
        SelectedComponent = newComponent;
        DropContainer?.Refresh();
    }

    private void AddNewButton() => AddNewComponent(new UIButton { Label = "New Button", URL = string.Empty });

    private void AddNewInputField() => AddNewComponent(new UIInputField { Label = "Input Field", Value = string.Empty });

    private void AddNewTextbox() => AddNewComponent(new UITextbox { Label = "New Textbox", NumberOfLines = 2, Content = string.Empty, SourceRef = Guid.Empty.ToString(), JsonField = string.Empty });
}
