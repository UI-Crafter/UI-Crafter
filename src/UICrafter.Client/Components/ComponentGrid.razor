@using UICrafter.Core.Models

<MudStack Style="15%">
    <MudText Class="">Components:</MudText>

    <MudContainer Class="rounded mud-background-gray pa-4">
        <MudGrid>
            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.SmartButton" Variant="Variant.Outlined" OnClick=@AddNewButton Size="Size.Large" />
                <MudText>Button</MudText>
            </MudItem>

            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.TextFields" Variant="Variant.Outlined" OnClick=@AddNewTextbox Size="Size.Large" />
                <MudText>Textbox</MudText>
            </MudItem>

            <MudItem sm="12" lg="4" Class="d-flex flex-column justify-start align-center">
                <MudIconButton Icon="@Icons.Material.Filled.Input" Variant="Variant.Outlined" OnClick=@AddNewInputField Size="Size.Large" />
                <MudText>Input</MudText>
            </MudItem>
        </MudGrid>
    </MudContainer>
</MudStack>

@code {
    [Parameter]
    public required List<proto_UIComponent> UIComponents { get; set; }

    private proto_UIComponent? _internalSelectedComponent;
    [Parameter]
    public required proto_UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<proto_UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<proto_UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<proto_UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<proto_UIComponent>?> DropContainerChanged { get; set; }

    private void AddNewUIComponent(proto_UIComponent component)
    {
        UIComponents.Add(component);
        SelectedComponent = component;
        DropContainer?.Refresh();
    }

    private void AddNewButton()
    {
        AddNewUIComponent(
            new proto_UIComponent
                {
                    Guid = Guid.NewGuid().ToString(),
                    DropZoneID = "Drop Zone 1",
                    Button = new proto_UIButton
                    {
                        Label = "New Button",
                        URL = string.Empty
                    }
                }
        );
    }

    private void AddNewInputField()
    {
        AddNewUIComponent(
            new proto_UIComponent
                {
                    Guid = Guid.NewGuid().ToString(),
                    DropZoneID = "Drop Zone 1",
                    InputField = new proto_UIInputField
                    {
                        Label = "Input Field"
                    }
                }
        );
    }

    private void AddNewTextbox()
    {
        AddNewUIComponent(
            new proto_UIComponent
                {
                    Guid = Guid.NewGuid().ToString(),
                    DropZoneID = "Drop Zone 1",
                    Textbox = new proto_UITextbox
                    {
                        Label = "Input Field",
                        NumberOfLines = 2,
                        Content = string.Empty,
                        SourceRef = Guid.Empty.ToString(),
                        JsonField = string.Empty
                    }
                }
        );
    }
}
