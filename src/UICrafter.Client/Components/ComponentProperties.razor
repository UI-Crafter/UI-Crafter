@using System.Text.RegularExpressions

@if (SelectedComponent is not null)
{
    if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Button)
    {
        <MudTextField @bind-Value="SelectedComponent.Button.Label" Label="Button Label" Variant="Variant.Outlined" MaxLength="25" />
        <MudTextField @bind-Value="SelectedComponent.Button.URL" Label="Button URL" Variant="Variant.Outlined" />
        <MudSelect T="CallMethod" Label="HTTP Method" @bind-Value="SelectedComponent.Button.HttpMethod">
            @foreach(CallMethod method in Enum.GetValues(typeof(CallMethod)))
            {
                <MudSelectItem Value="method">@method.ToString()</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="SelectedComponent.Button.HttpHeader" Label="HTTP Header" Variant="Variant.Outlined" Lines="3" />
        if (SelectedComponent.Button.HttpMethod == CallMethod.Post || SelectedComponent.Button.HttpMethod == CallMethod.Put)
        {
            <MudTextField @bind-Value="SelectedComponent.Button.HttpBody" Label="HTTP Body" Variant="Variant.Outlined" Lines="5" />
        }
    }
    else if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.InputField)
    {
        <MudTextField T="string" Value="SelectedComponent.InputField.Label" ValueChanged="OnInputFieldChange" Label="Input Label" Variant="Variant.Outlined" MaxLength="25" />
        <MudTextField @bind-Value="SelectedComponent.InputField.LogicalName" Label="Logical Name" Variant="Variant.Outlined" MaxLength="25" ReadOnly />
    }
    else if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Textbox)
    {
        <MudTextField @bind-Value="SelectedComponent.Textbox.Label" Label="Textbox label" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="SelectedComponent.Textbox.NumberOfLines" Label="Number of lines" Variant="Variant.Outlined"/>
        <MudTextField @bind-Value="SelectedComponent.Textbox.Content" Label="Textbox Content" Variant="Variant.Outlined" Lines="4"/>
        <MudSelect T="string" Label="Source Reference" @bind-Value="SelectedComponent.Textbox.SourceRef">
            <MudSelectItem Value="Guid.Empty.ToString()">None</MudSelectItem>
            @foreach (var component in UIComponents.Where(c => c.ComponentCase == UIComponent.ComponentOneofCase.Button))
            {
                <MudSelectItem Value="@component.Guid">@component.Button.Label</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="SelectedComponent.Textbox.JsonField" Label="Json Field" Variant="Variant.Outlined"/>
    }
    <MudButtonGroup Variant="Variant.Outlined" Class="mx-auto">
        <MudButton StartIcon="@Icons.Material.Filled.Delete" OnClick=@DeleteSelectedComponent Size="Size.Large">Delete</MudButton>
    </MudButtonGroup>
}

@code {
    [Parameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;

                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private void OnInputFieldChange(string input)
    {
        if (SelectedComponent?.ComponentCase != UIComponent.ComponentOneofCase.InputField) return;

        SelectedComponent.InputField.Label = input;
        SelectedComponent.InputField.LogicalName = Regex.Replace(input.ToLower().Replace(" ", "-"), @"[^a-z0-9-]", "");
    }

    private void DeleteSelectedComponent()
    {
        if (SelectedComponent is null) return;

        if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Button)
        {
            var textBoxesWithSourceRef = UIComponents
                .Where(component => component.ComponentCase == UIComponent.ComponentOneofCase.Textbox && component.Textbox.SourceRef == SelectedComponent.Guid)
                .ToList();

            foreach (var component in textBoxesWithSourceRef)
            {
                component.Textbox.SourceRef = Guid.Empty.ToString();
            }
        }

        UIComponents.Remove(SelectedComponent);
        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private void SaveSelectedComponent()
    {
        DropContainer?.Refresh();
    }
}
