@using UICrafter.Core.Models

<MudStack Style="width: 25%;">
    <MudText>Properties:</MudText>

    <MudStack Class="rounded mud-background-gray pa-4 my-2 ">
        @if (SelectedComponent is not null)
        {
            @if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Button)
            {
                <MudTextField @bind-Value="SelectedComponent.Button.Label" Label="Button Label" Variant="Variant.Outlined" MaxLength="25"></MudTextField>
                <MudTextField @bind-Value="SelectedComponent.Button.URL" Label="Button URL" Variant="Variant.Outlined"></MudTextField>
            }
            else if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.InputField)
            {
                <MudTextField @bind-Value="SelectedComponent.InputField.Label" Label="Input Placeholder" Variant="Variant.Outlined" MaxLength="25"></MudTextField>
            }
            else if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Textbox)
            {
                <MudTextField @bind-Value="SelectedComponent.Textbox.Label" Label="Textbox label" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="SelectedComponent.Textbox.NumberOfLines" Label="Number of lines" Variant="Variant.Outlined"></MudTextField>
                <MudTextField @bind-Value="SelectedComponent.Textbox.Content" Label="Textbox Content" Variant="Variant.Outlined" Lines="4"></MudTextField>
                <MudSelect @bind-Value="SelectedComponent.Textbox.SourceRef">
                    <MudSelectItem Value="Guid.Empty.ToString()">None</MudSelectItem>
                    @foreach (var component in UIComponents)
                    {
                        if (component.ComponentCase == UIComponent.ComponentOneofCase.Button)
                        {
                            <MudSelectItem Value="component.Guid">@component.Button.Label</MudSelectItem>
                        }
                    }
                </MudSelect>
                <MudTextField @bind-Value="SelectedComponent.Textbox.JsonField" Label="Json Field" Variant="Variant.Outlined"></MudTextField>
            }
            <MudButtonGroup Variant="Variant.Outlined" Class="mx-auto">
                <MudIconButton Icon="@Icons.Material.Filled.Save" OnClick=@SaveSelectedComponent Size="Size.Large" />
                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick=@DeleteSelectedComponent Size="Size.Large" />
            </MudButtonGroup>
        }
        else
        {
            <MudText Typo="Typo.body1">No component selected.</MudText>
        }
    </MudStack>
</MudStack>

@code {
    [Parameter]
    public required List<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private void DeleteSelectedComponent()
    {
        if (SelectedComponent is null) return;

        if (SelectedComponent.ComponentCase == UIComponent.ComponentOneofCase.Button)
        {
            var textBoxesWithSourceRef = UIComponents
            .FindAll(component => component.ComponentCase == UIComponent.ComponentOneofCase.Textbox && component.Textbox.SourceRef == SelectedComponent.Guid);

            foreach (var component in textBoxesWithSourceRef)
            {
                component.Textbox.SourceRef = Guid.Empty.ToString();
            }
        }

        UIComponents.Remove(SelectedComponent);
        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private void SaveSelectedComponent()
    {
        DropContainer?.Refresh();
    }
}
