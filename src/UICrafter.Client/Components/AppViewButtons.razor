<MudStack Row="true">
    <MudOverlay Visible="Visible" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>

    <MudTextField @bind-Value="@AppView.Name" Label="App-view name" Variant="Variant.Outlined" Class="ma-5"></MudTextField>

    <MudButtonGroup Variant="Variant.Outlined" Class="ma-5 uicrafter-tooltip-buttongroup">
        <MudTooltip Text="Save" Arrow="true" Placement="Placement.Bottom" >
            <MudIconButton Icon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="@SaveAppView" />
        </MudTooltip>
        <MudTooltip Text="Delete" Arrow="true" Placement="Placement.Bottom" >
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Large" OnClick="@DeleteAppView" />
        </MudTooltip>
        <MudTooltip Text="Clear" Arrow="true" Placement="Placement.Bottom" >
            <MudIconButton Icon="@Icons.Material.Filled.Clear" Size="Size.Large" OnClick="@ClearAppView" />
        </MudTooltip>
        <MudTooltip Text="Load" Arrow="true" Placement="Placement.Bottom" >
            <MudIconButton Icon="@Icons.Material.Filled.Download" Size="Size.Large" OnClick="@LoadAppView" />
        </MudTooltip>
    </MudButtonGroup>
</MudStack>

@code {
    [Inject]
    private IAppViewRepository AppViewRepository { get; set; } = default!;

    private AppView AppView { get; set; } = new AppView { Name = string.Empty };
    private bool Visible { get; set; } = false;

    [Parameter]
    public required UIComponentList UIComponentList { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    AppView test = new AppView();

    private async Task SaveAppView()
    {
        Visible = true;

        var serializedContent = UIComponentList.ToByteString();

        AppView.Content = serializedContent;

        try
        {
            if (AppView.Id == 0)
            {
                AppView = await AppViewRepository.CreateAppView(AppView);
                Log.Debug("Called Create");
            }
            else
            {
                await AppViewRepository.UpdateAppView(AppView);
                Log.Debug("Called Update");
            }
        }
        catch (Exception ex)
        {
            Log.Error("Error while saving AppView: {message}", ex.Message);
        }

        Visible = false;
    }

    private async Task DeleteAppView()
    {
        Visible = true;

        try
        {
            if (AppView.Id != 0)
            {
                await AppViewRepository.DeleteAppViewById(AppView.Id);

                ClearAppView();

                AppView = new AppView();
            }
        }
        catch (Exception ex)
        {
            Log.Debug("Error while deleting AppView: {message}", ex.Message);
        }

        Visible = false;
    }

    private void ClearAppView()
    {
        if (UIComponentList.UIComponents.Count == 0) return;

        UIComponentList.UIComponents.Clear();
        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private async Task LoadAppView()
    {
        Visible = true;

        ClearAppView();

        try
        {
            var test = await AppViewRepository.GetAppViews();

            var id = test.FirstOrDefault()?.Id ?? 0;

            AppView = await AppViewRepository.GetAppViewById(id);

            var parsedContent = UIComponentList.Parser.ParseFrom(AppView.Content);

            UIComponentList.UIComponents.AddRange(parsedContent.UIComponents);

            DropContainer?.Refresh();
        }
        catch (Exception ex)
        {
            Log.Debug("Error while loading AppView: {message}", ex.Message);
        }

        Visible = false;
    }
}
