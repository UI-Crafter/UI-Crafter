@using Google.Protobuf
@using Google.Protobuf.Collections
@using Google.Protobuf.WellKnownTypes
@using Grpc.Core
@using UICrafter.Core.UIComponents
@using UICrafter.Core.AppView
@using UICrafter.Core.Utility

<MudStack Row="true">
    <MudTextField @bind-Value="@AppView.Name" Label="App-view name" Variant="Variant.Outlined"></MudTextField>

    <MudButtonGroup Variant="Variant.Outlined" Class="ma-auto">
        <MudIconButton Icon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="@SaveAppView" />
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Large" OnClick="@DeleteAppView" />
        <MudIconButton Icon="@Icons.Material.Filled.Clear" Size="Size.Large" OnClick="@ClearAppView" />
        <MudIconButton Icon="@Icons.Material.Filled.Download" Size="Size.Large" OnClick="@LoadAppView" />
    </MudButtonGroup>
</MudStack>

@code {
    [Inject]
    private IAppViewRepository AppViewRepository { get; set; } = default!;

    private AppView AppView { get; set; } = new AppView { Name = "New AppView" };

    [Parameter]
    public required UIComponentList UIComponentList { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private async Task SaveAppView()
    {
        var serializedContent = UIComponentList.ToByteString();

        AppView.Content = serializedContent;

        try
        {
            var response = await AppViewRepository.CreateAppViewAsync(AppView);
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"Error while saving AppView: {ex.Status.Detail}");
        }

        await Task.Delay(1000);
        Console.WriteLine("AppView saved.");
    }

    private async Task DeleteAppView()
    {
        try
        {
            await AppViewRepository.DeleteAppViewByIdAsync(AppView.Id);
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"Error while deleting AppView: {ex.Status.Detail}");
        }

        await Task.Delay(1000);
        Console.WriteLine("AppView deleted.");
    }

    private void ClearAppView()
    {
        if (UIComponentList.UIComponents.Count == 0) return;

        UIComponentList.UIComponents.Clear();
        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private async Task LoadAppView()
    {
        try
        {
            AppView = await AppViewRepository.GetAppViewByIdAsync(1);

            UIComponentList = UIComponentList.Parser.ParseFrom(AppView.Content);

            DropContainer?.Refresh();
        }
        catch (RpcException ex)
        {
            Console.WriteLine($"Error while loading AppView: {ex.Status.Detail}");
        }

        await Task.Delay(1000);
        Console.WriteLine("AppView loaded.");
    }
}
