<MudStack Class="rounded mud-background-gray pa-4 overflow-auto" Style="max-height: 75vh;" @onmousedown:stopPropagation>
    @if (SelectedComponent is not null)
    {
        <ComponentProperties @bind-SelectedComponent="@SelectedComponent" @bind-DropContainer="@DropContainer" UIComponents="@UIComponents" />
    }
    else
    {
        <AppViewProperties @bind-SelectedComponent="@SelectedComponent" @bind-DropContainer="@DropContainer" UIComponents="@UIComponents" @bind-AppView="AppView" />
    }
</MudStack>

@code {
    [Parameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private AppView? _internalAppView;
    [Parameter]
    public required AppView? AppView
    {
        get => _internalAppView;
        set
        {
            if (AppViewChanged.HasDelegate && value != _internalAppView)
            {
                _internalAppView = value;
                AppViewChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<AppView?> AppViewChanged { get; set; }
}
