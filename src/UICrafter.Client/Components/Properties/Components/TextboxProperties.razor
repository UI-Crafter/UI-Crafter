@using UICrafter.Client.Components.Dialogs

<MudTextField @bind-Value="SelectedComponent.Textbox.Label" Label="Textbox label" Variant="Variant.Outlined" Immediate />
<MudTextField @bind-Value="SelectedComponent.Textbox.NumberOfLines" Label="Number of lines" Variant="Variant.Outlined" Immediate />
<MudSelect T="string" Label="Source Reference" @bind-Value="SelectedComponent.Textbox.SourceRef">
    <MudSelectItem Value="Guid.Empty.ToString()">None</MudSelectItem>
    @foreach (var component in UIComponents.Where(c => c.ComponentCase == UIComponent.ComponentOneofCase.Button))
    {
        <MudSelectItem Value="@component.Guid">@component.Button.Label</MudSelectItem>
    }
</MudSelect>

<MudField Label="Json field or query" Variant="Variant.Outlined" InnerPadding="false">
    <MudStack Row>
        <MudRadioGroup T="bool" @bind-Value=@SelectedComponent.Textbox.IsJsonQuery>
            <MudRadio Value="false">Field</MudRadio>
            <MudRadio Value="true">Query</MudRadio>
        </MudRadioGroup>
        <MudCheckBox Class="ml-auto" Size="Size.Medium" T="bool" @bind-Value=@SelectedComponent.Textbox.CleanupTextBox>Clean Output</MudCheckBox>
    </MudStack>
</MudField>

<MudStack Row Justify="Justify.Center">
    <MudTextField @bind-Value="SelectedComponent.Textbox.JsonField" Label=@(SelectedComponent.Textbox.IsJsonQuery ? "Json Query" : "Json Field") Variant="Variant.Outlined" Immediate/>
    <MudButton StartIcon="@Icons.Material.Outlined.Code" Variant="Variant.Outlined" Style="height: 56px;" Size="Size.Large" IconSize="Size.Large" Class="mt-2" OnClick="OpenPreview">Preview</MudButton>
</MudStack>

@code {
    [CascadingParameter]
    public required UIComponent SelectedComponent { get; set; }

    [Parameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    [Inject] IDialogService DialogService { get; set; } = default!;

    private async Task OpenPreview()
    {
        var parameters = new DialogParameters<JsonReponsePreviewDialog>
        {
            { x => x.UIComponents, new ObservableCollection<UIComponent>(UIComponents.Select(x => x.Clone())) },
            { x => x.OutputComponent, SelectedComponent.Clone() },
        };

        var dialog = DialogService.Show<JsonReponsePreviewDialog>(null, parameters);

        var result = await dialog.Result;

        var returnedComponent = ((UIComponent?)result?.Data);

        if (returnedComponent is not null)
        {
            SelectedComponent.Textbox.JsonField = returnedComponent.Textbox.JsonField;
            SelectedComponent.Textbox.IsJsonQuery = returnedComponent.Textbox.IsJsonQuery;
            SelectedComponent.Textbox.CleanupTextBox = returnedComponent.Textbox.CleanupTextBox;
        }
    }
}
