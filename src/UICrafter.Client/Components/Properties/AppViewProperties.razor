@using UICrafter.Client.Components.Dialogs
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (AppView is not null)
{
    <MudOverlay Visible="Visible" DarkBackground="true" Absolute="true">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudOverlay>

    <MudTextField @bind-Value="@AppView.Name" Label="App-view name" Variant="Variant.Outlined"></MudTextField>

    @if (AppView.CreatedAt != DateTime.MinValue && AppView.UpdatedAt != DateTime.MinValue)
    {
        <MudDatePicker Date="@AppView.CreatedAt" Label="Created at" Variant="Variant.Outlined" ReadOnly />
        <MudDatePicker Date="@AppView.UpdatedAt" Label="Updated at" Variant="Variant.Outlined" ReadOnly />
    }

    <MudSwitch @bind-Value="AppView.IsPublic" Class="uicrafter-switch" Label="Public" ThumbIcon="@(AppView.IsPublic ? Icons.Material.Filled.Public : Icons.Material.Filled.PublicOff)" LabelPosition="LabelPosition.Start" />

    <MudButtonGroup Variant="Variant.Outlined" Class="uicrafter-tooltip-buttongroup justify-center ma-2">
        <MudTooltip Text="Upload" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.CloudUpload" OnClick="@SaveAppView" />
        </MudTooltip>
        <MudTooltip Text="Delete" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@DeleteAppView" />
        </MudTooltip>
        <MudTooltip Text="Clear" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.Clear" OnClick="@ClearAppView" />
        </MudTooltip>
        <MudTooltip Text="Load" Arrow Placement="Placement.Bottom">
            <MudIconButton Icon="@Icons.Material.Filled.CloudDownload" OnClick="@LoadAppView" />
        </MudTooltip>
    </MudButtonGroup>
}

@code {
    [Inject]
    private IAppViewRepository AppViewRepository { get; set; } = default!;

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;

    private bool Visible { get; set; } = false;

    private ClaimsPrincipal User { get; set; } = default!;

    [Parameter]
    public required ObservableCollection<UIComponent> UIComponents { get; set; }

    private UIComponent? _internalSelectedComponent;
    [Parameter]
    public required UIComponent? SelectedComponent
    {
        get => _internalSelectedComponent;
        set
        {
            if (SelectedComponentChanged.HasDelegate && value != _internalSelectedComponent)
            {
                _internalSelectedComponent = value;
                SelectedComponentChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<UIComponent?> SelectedComponentChanged { get; set; }

    private MudDropContainer<UIComponent>? _internalDropContainer;
    [Parameter]
    public required MudDropContainer<UIComponent>? DropContainer
    {
        get => _internalDropContainer;
        set
        {
            if (DropContainerChanged.HasDelegate && value != _internalDropContainer)
            {
                _internalDropContainer = value;
                DropContainerChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<MudDropContainer<UIComponent>?> DropContainerChanged { get; set; }

    private AppView? _internalAppView;
    [Parameter]
    public required AppView? AppView
    {
        get => _internalAppView;
        set
        {
            if (AppViewChanged.HasDelegate && value != _internalAppView)
            {
                _internalAppView = value;
                AppViewChanged.InvokeAsync(value);
            }
        }
    }
    [Parameter]
    public required EventCallback<AppView?> AppViewChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomLeft;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        User = authState.User;
    }

    private async Task SaveAppView()
    {
        if (AppView is null) return;

        if (string.IsNullOrWhiteSpace(AppView.Name))
        {
            Snackbar.Add("App-view missing name", Severity.Error);
            return;
        }

        Visible = true;

        var serializedContent = new UIComponentList { UIComponents = { UIComponents } }.ToByteString();

        AppView.Content = serializedContent;

        try
        {
            if (AppView.Id == 0)
            {
                AppView = await AppViewRepository.CreateAppView(AppView);
                Snackbar.Add("App-view was created", Severity.Success);
            }
            else
            {
                await AppViewRepository.UpdateAppView(AppView);
                Snackbar.Add("App-view was updated", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while uploading App-view", Severity.Error);
            Log.Error("Error while saving AppView: {message}", ex.Message);
        }

        Visible = false;
    }

    private async Task DeleteAppView()
    {
        if (AppView is null || AppView.Id == 0) return;

        Visible = true;

        try
        {
            var dialog = DialogService.Show<DeleteDialog>();
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                await AppViewRepository.DeleteAppViewById(AppView.Id);

                ClearAppView();

                AppView = new AppView();

                Snackbar.Add("App-view was deleted", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while deleting App-view", Severity.Error);
            Log.Debug("Error while deleting AppView: {message}", ex.Message);
        }

        Visible = false;
    }

    private void ClearAppView()
    {
        if (UIComponents.Count == 0) return;

        UIComponents.Clear();
        SelectedComponent = null;
        DropContainer?.Refresh();
    }

    private async Task LoadAppView()
    {
        if (AppView is null) return;

        Visible = true;

        try
        {
            var dialog = DialogService.Show<AppViewSelectionDialog>();
            var result = await dialog.Result;

            if (result is not null && !result.Canceled)
            {
                ArgumentNullException.ThrowIfNull(result.Data);

                var id = (long)(result.Data);

                var tmp = await AppViewRepository.GetAppViewById(id);

                if(tmp.UserId != User.GetAzureId().ToString())
                {
                    tmp.Id = 0;
                }

                AppView = tmp;

                ClearAppView();

                var parsedContent = UIComponentList.Parser.ParseFrom(AppView.Content);

                foreach (var component in parsedContent.UIComponents)
                {
                    UIComponents.Add(component);
                }

                DropContainer?.Refresh();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Error while loading App-view", Severity.Error);
            Log.Debug("Error while loading AppView: {message}", ex.Message);
        }

        Visible = false;
    }
}
