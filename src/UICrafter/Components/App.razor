@using System.Text.Json
@using UICrafter.Core.Models

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="app.css?v=2" rel="stylesheet" />
    <link rel="icon" type="image/ico" href="logo_background.svg" />
    <HeadOutlet @rendermode="InteractiveAuto" />
</head>

<body>
    @if (HasTheme)
    {
        <Routes @rendermode="InteractiveAuto" Theme="theme" />
    }
    else
    {
        <ThemeCookieSetup />
    }
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script src="js/utility.js"></script>
</body>

</html>

@code {
    [Inject] private PersistentComponentState ApplicationState { get; set; } = default!;
    [Inject] private IHttpContextAccessor HttpContextAccessor { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private Theme theme = new();
    private bool HasTheme = false;

    protected override void OnInitialized()
    {
        var cookies = HttpContextAccessor.HttpContext?.Request.Cookies;
        if (cookies != null && cookies.TryGetValue("ThemeInfo", out var base64EncodedTheme))
        {
            HasTheme = true;
            var decodedJson = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(base64EncodedTheme));
            theme = JsonSerializer.Deserialize<Theme>(decodedJson) ?? theme;
            ApplicationState.RegisterOnPersisting(() => OnPersisting());
        }
    }

    private Task OnPersisting()
    {
        ApplicationState.PersistAsJson("ThemeInfo", theme);
        return Task.CompletedTask;
    }
}
